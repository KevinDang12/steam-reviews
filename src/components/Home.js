import React, { useState, useEffect } from 'react';
import '../styles/Home.css';
import SearchBar from './SearchBar';
import SteamResult from './SteamResult';
import SteamReview from './SteamReview';
import axios from 'axios';
import CountrySelect from './CountrySelectDialog';
import IconButton from '@mui/material/IconButton';
import Snackbar from '@mui/material/Snackbar';
import InfoIcon from '@mui/icons-material/Info';
import InfoDialog from './InfoDialog';
import LoadingBar from './LoadingBar';
import AdComponent from '../ads/AdComponent';

// option to switch to different country, select country that Steam supports

/*
  Font ^
  Lines + Labels separate section, Epic Games, Steam, SteamDB, GOG ^
  Disclaimer (Generated by AI, make sure you do your due diligence) ^
  Search Bar Search by Game or paste the Steam URL ^
  Load the description and image first, process the reviews in the background ^
  Move Tags above the reviews ^
  Add back button to go back to search results ^
  Add functionality for URL Search * (Verify Appid exists)
  Error Message for invalid URL ^

  Consider having seperate URL for review
  Genre lead anywhere?

  Banner for DLC, redirect to base game review, back button to DLC ^

  Padding to Dialog Box, finish styling and country select ^ (Add error if no country selected)

  Explanation on how app section: Steam API, OPENAI API model, extract 
  reviews from Steam and process them using openai (DIALOG) ^

  If have time, save reviews to DB ^

  Summary for least popular games/ date to reviews and update if over 30 days
  Disclaimer

  Country Dialog if no country selected ^

  Test openAI using one/two reviews 10 times

  Most important: Add Google Ads, how to use it, how to display (left-hand/right-hand side of the screen)

  Find a way to deploy to Firebase

  Black and Gray Logo

  Update Toast/Loading Bar to MUI ^
  */

export default function Home() {

  const [ showReview, setShowReview ] = useState(false);
  const [ appId, setAppId ] = useState("");
  const [ steamReview, setSteamReview ] = useState({});
  const [ response, setResponse ] = useState([]);
  const [ loading, setLoading ] = useState(false);
  const [ loadReviews, setLoadReviews ] = useState(false);
  const [ searchResults, setSearchResults ] = useState([]);
  const [ country, setCountry ] = useState("us");
  const [ countryDialogOpen, setCountryDialogOpen ] = useState(false);
  const [ infoOpen, setInfoOpen ] = useState(false);
  const [ searched, setSearched ] = useState(false);

  const [ toastOpen, setToastOpen ] = useState(false);
  const [ toastMessage, setToastMessage ] = useState("");
  const [ toastDuration, setToastDuration ] = useState(0);

  const [ countries, setCountries ] = useState([]);
  const [ status, setStatus ] = useState(false);
  const [ showError, setShowError ] = useState(false);

  useEffect(() => {
    async function getCountries() {
      try {
        let { data } = await axios.get(`${process.env.REACT_APP_URL}/api/countries`);
        setCountries(data);
      } catch (err) {
        setCountries([]);
        console.error(err);
      }
    }
    getCountries();
  }, []);

  useEffect(() => {
    async function serverStatus() {
      try {
        let { data } = await axios.get(`${process.env.REACT_APP_URL}/api/status`);
        if (data === "The server is running") {
          setStatus(true);
        } else {
          setShowError(true);
          setStatus(false);
        }
      } catch (err) {
        setShowError(true);
        setStatus(false);
      }
    }
    serverStatus();
  }, []);

  function handleCountryDialog() {
    if (countries.length > 0) {
      setCountryDialogOpen(true);
    } else {
      showToast(3000, "Unable to select country. Please try again later.");
    }
  }

  async function getResponse(appId) {
    try {
      setLoadReviews(true);
      let steamReview = await axios.get(`${process.env.REACT_APP_URL}/api/gamedetails/${appId}?country=${country}`);
      if (steamReview.data === 404) {
        showToast(5000, "Invalid Steam URL.");
        setLoadReviews(false);
        return;
      } else {
        setSteamReview(steamReview.data);
        setAppId(appId);
        setShowReview(true);
        setLoadReviews(false);
        const response = await axios.get(`${process.env.REACT_APP_URL}/api/reviews/${appId}?country=${country}`);
        setResponse(response.data);
      }
    } catch (err) {
      setLoadReviews(false);
      showToast(3000, "Unable to fetch Steam details and reviews. Please try again later.");
    }
  }

  const showToast = (duration, message) => {
    setToastOpen(true);
    setToastDuration(duration);
    setToastMessage(message);
  };

  const handleClose = () => {
    setToastOpen(false);
  };

  return (
    <div className="App">
      {
        loadReviews ?

        <div className='loading-bar-container'>
          <div style={{ height: '100vh'}}>
            <LoadingBar />
          </div>
        </div> :

        <div className='container'>
          <div className="left-component">
            <AdComponent />
          </div>
          <div className='search-bar-container'>
            {
              showReview ? 
              <div>
                <SteamReview 
                  appId={appId}
                  result={steamReview}
                  response={response}
                  setResponse={setResponse}
                  setShowReview={setShowReview}
                  country={country}
                />
              </div> : (
              <>
                <div className='search-bar'>
                    <SearchBar
                      setResponse={setResponse}
                      setLoading={setLoading}
                      setSearchResults={setSearchResults}
                      setShowReview={setShowReview}
                      getResponse={getResponse}
                      country={country}
                      setSearched={setSearched}
                      showToast={showToast}
                      status={status}
                    />
                    <div className='menu-icons'>
                      <CountrySelect
                        country={country} 
                        setCountry={setCountry} 
                        setOpen={setCountryDialogOpen} 
                        open={countryDialogOpen}
                        countries={countries}
                      />
                      <IconButton
                        size="large"
                        onClick={handleCountryDialog}
                        sx={{
                            margin: '10px 5px 0 5px',
                            color: 'white',
                            height: '50px',
                            width: '50px',
                            '&:hover': {
                              backgroundColor: 'lightgray',
                            },
                        }}
                        >
                        <img
                          loading="lazy"
                          width="50"
                          srcSet={`https://flagcdn.com/w40/${country}.png 2x`}
                          src={`https://flagcdn.com/w20/${country}.png`}
                          alt=""
                        />
                    </IconButton>
                    <InfoDialog
                      open={infoOpen}
                      setOpen={setInfoOpen}
                    />
                    <IconButton
                        size="small"
                        onClick={() => setInfoOpen(true)}
                        sx={{
                            margin: '10px 5px 0 5px',
                            color: 'white',
                            height: '50px',
                            width: '50px',
                            '&:hover': {
                              backgroundColor: 'darkgray',
                            },
                        }}
                      >
                        <InfoIcon 
                          fontSize="small"
                          sx={{
                            height: '30px',
                            width: '30px',
                          }}
                        />
                      </IconButton>
                    </div>
                </div>
                {
                  loading ? 
        
                  <div className='loading-bar-container'>
                    <div style={{ height: '100vh'}}>
                      <LoadingBar />
                    </div>
                  </div> :
        
                  <div className='results-container'>
                    {
                      ((searchResults.length === 0 && searched) || !status) ?
                      <div className='error-container'>
                        <h1 className='error-message'>
                            {
                              status ?
                              <div>0 results match your search.</div> : 
                              (
                                showError ? 
                                <div>Unable to search for Steam games. Please try again later.</div>
                                : <></>
                              )
                            }
                          </h1>
                      </div> :
                      searchResults.map((result) => {
                        return (
                          <SteamResult
                            getResponse={() => getResponse(result.id)}
                            key={result.id}
                            image={result.image}
                            name={result.name}
                            price={result.price}
                            currency={result.currency}
                          />
                        )
                      })
                    }
                  </div>
                }
              </>
            )}
          </div>
          <div className="right-component">
            <AdComponent />
          </div>
        </div>
      }
      <Snackbar
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        autoHideDuration={toastDuration}
        open={toastOpen}
        onClose={handleClose}
        message={toastMessage}
      />
    </div>
  );
}
