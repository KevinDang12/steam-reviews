import React, { useState, useEffect, useRef } from 'react';
import '../styles/Home.css';
import SteamResult from './SteamResult';
import axios from 'axios';
import CountrySelect from './CountrySelectDialog';
import Snackbar from '@mui/material/Snackbar';
import InfoDialog from './InfoDialog';
import LoadingBar from './LoadingBar';
import MediaQuery from 'react-responsive';
import { useLocation } from 'react-router-dom';
import SportsEsportsIcon from '@mui/icons-material/SportsEsports';
import HorizontalAdBanner from '../ads/728x90Banner';
import Navbar from './NavBar';

// option to switch to different country, select country that Steam supports

/*
  Font ^
  Lines + Labels separate section, Epic Games, Steam, SteamDB, GOG ^
  Disclaimer (Generated by AI, make sure you do your due diligence) ^
  Search Bar Search by Game or paste the Steam URL ^
  Load the description and image first, process the reviews in the background ^
  Move Tags above the reviews ^
  Add back button to go back to search results ^
  Add functionality for URL Search * (Verify Appid exists)
  Error Message for invalid URL ^

  Consider having seperate URL for review
  Genre lead anywhere?

  Banner for DLC, redirect to base game review, back button to DLC ^

  Padding to Dialog Box, finish styling and country select ^ (Add error if no country selected)

  Explanation on how app section: Steam API, OPENAI API model, extract 
  reviews from Steam and process them using openai (DIALOG) ^

  If have time, save reviews to DB ^

  Summary for least popular games/ date to reviews and update if over 30 days
  Disclaimer

  Country Dialog if no country selected ^

  Test openAI using one/two reviews 10 times

  Most important: Add Google Ads, how to use it, how to display (left-hand/right-hand side of the screen)

  Find a way to deploy to Firebase

  Black and Gray Logo

  Update Toast/Loading Bar to MUI ^
  */

export default function Home(props) {

  const { country, setCountry } = props;

  const [ loading, setLoading ] = useState(false);
  const [ searchResults, setSearchResults ] = useState([]);
  const [ countryDialogOpen, setCountryDialogOpen ] = useState(false);
  const [ infoOpen, setInfoOpen ] = useState(false);

  const [ toastOpen, setToastOpen ] = useState(false);
  const [ toastMessage, setToastMessage ] = useState("");
  const [ toastDuration, setToastDuration ] = useState(0);

  const [ countries, setCountries ] = useState([]);
  const [ status, setStatus ] = useState(false);
  const [ showError, setShowError ] = useState(false);
  const [ showIcon, setShowIcon ] = useState(false);

  const [ errorMessage, setErrorMessage ] = useState("");
  const [ className, setClassName ] = useState("search-bar-container");

  const location = useLocation();

  const adDivRef1 = useRef(null);
  const adDivRef2 = useRef(null);

  useEffect(() => {
      const insertScript = (atOptions, ref) => {
          const conf = document.createElement('script');
          const s = document.createElement('script');

          conf.innerHTML = `window.atOptions = ${JSON.stringify(atOptions)};`;
          s.type = 'text/javascript';
          s.src = `//www.topcreativeformat.com/${atOptions.key}/invoke.js`;

          if (ref.current && !ref.current.firstChild) {
              ref.current.appendChild(conf);
              ref.current.appendChild(s);
          }
      };

      const atOptions1 = {
          key: '9a24fe8117a1638c942110c0d4f4c2b0',
          format: 'iframe',
          height: 300,
          width: 160,
          params: {}
      };

      const atOptions2 = {
          key: '987c31b0d0867252ba14295f3ad07915',
          format: 'iframe',
          height: 600,
          width: 160,
          params: {}
      };

      const adBanner1 = adDivRef1.current;
      const adBanner2 = adDivRef2.current;

      insertScript(atOptions1, adDivRef1);
      setTimeout(() => insertScript(atOptions2, adDivRef2), 750);

      return () => {
          if (adBanner1) {
            adBanner1.innerHTML = '';
          }
          if (adBanner2) {
            adBanner2.innerHTML = '';
          }
      };
  }, [className]);

  useEffect(() => {
    async function getCountries() {
      try {
        let { data } = await axios.get(`${process.env.REACT_APP_URL}/api/countries`);
        setCountries(data);
      } catch (err) {
        setCountries([]);
        console.error(err);
      }
    }
    getCountries();
  }, []);

  useEffect(() => {
    async function serverStatus() {
      try {
        let { data } = await axios.get(`${process.env.REACT_APP_URL}/api/status`);
        if (data !== "The server is running") {
          setShowError(true);
          setErrorMessage("Unable to search for Steam games. Please try again later.");
          setStatus(false);
        } else {
          setStatus(true);
        }
      } catch (err) {
        setShowError(true);
        setStatus(false);
        setErrorMessage("Unable to search for Steam games. Please try again later.");
      }
    }
    setShowError(false);
    serverStatus();
  }, []);

  useEffect(() => {
    async function fetchUserData(query) {
      try {
        setLoading(true);
        const { data } = await axios.get(`${process.env.REACT_APP_URL}/api/store/${query}?country=${country}`);
        if (data.length <= 0) {
          setErrorMessage("0 results match your search.");
          setShowError(true);
        }
        setSearchResults(data);
        setLoading(false);
      } catch (err) {
        setLoading(false);
        setShowError(true);
        setErrorMessage("0 results match your search.");
      }
    }

    if (status) {
      const searchParams = new URLSearchParams(location.search);
      const query = searchParams.get('term');
      if (query !== null) {
        fetchUserData(query);
        setShowIcon(false);
      } else {
        setShowIcon(true);
        setSearchResults([]);
        setShowError(false);
      }
    }
  }, [location.search, status, country]);

  function handleCountryDialog() {
    if (countries.length > 0) {
      setCountryDialogOpen(true);
    } else {
      showToast(3000, "Unable to select country. Please try again later.");
    }
  }

  const showToast = (duration, message) => {
    setToastOpen(true);
    setToastDuration(duration);
    setToastMessage(message);
  };

  const handleClose = () => {
    setToastOpen(false);
  };

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        setClassName("search-bar-container");
      } else {
        setClassName("search-bar-container-mobile");
      }
    };

    window.addEventListener("resize", handleResize);

    handleResize();

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
    <div className="App">
      <Navbar
        status={status}
        country={country}
        setInfoOpen={setInfoOpen}
        handleCountryDialog={handleCountryDialog}
      />
      {
        <div className='container'>
          <MediaQuery minDeviceWidth={1024}>
            <div className="left-component">
              <div ref={adDivRef1}></div>
              {/* <LeftAdBanner /> */}
            </div>
          </MediaQuery>
          <div className={className}>
            {(
              <>
                {
                  loading ? 
          
                  <div className='loading-bar-container'>
                    <div style={{ height: '80vh' }}>
                      <LoadingBar />
                    </div>
                  </div> :

                  <div className='results-container'>
                    {
                      (searchResults.length === 0) ?
                      <>
                        {
                          showError ?
                          <h1 className='error-message'>{errorMessage}</h1> : 
                          (
                            showIcon &&
                            <div style={{alignItems: 'center', margin: 'auto 0'}}>
                              <SportsEsportsIcon
                                sx={{
                                  color: 'white',
                                  fontSize: 300,
                                }}
                              />
                              <p className='error-message'>Search for a Steam game to get the review summary.</p>
                              <MediaQuery maxWidth={1023}>
                                <div style={{ margin: '50px 0', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                                  <HorizontalAdBanner
                                    optionKey={"b60371fabf2b5c5d6242d20d7f155218"}
                                    height={250}
                                    width={300}
                                  />
                                </div>
                              </MediaQuery>
                            </div>
                          )
                        }
                      </> :
                      <>
                      {searchResults.map((result) => {
                        return (
                          <SteamResult
                            key={result.id}
                            appId={result.id}
                            image={result.image}
                            name={result.name}
                            price={result.price}
                            currency={result.currency}
                          />
                        )
                      })}
                      <MediaQuery maxWidth={1023}>
                        <div style={{ margin: '20px 0', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
                          <HorizontalAdBanner
                            optionKey={"b60371fabf2b5c5d6242d20d7f155218"}
                            height={250}
                            width={300}
                          />
                        </div>
                      </MediaQuery>
                      </>
                    }
                  </div>
                }
              </>
            )}
          </div>
          
          <MediaQuery minDeviceWidth={1024}>
            <div className="right-component">    
                <div ref={adDivRef2}></div>
                {/* <RightAdBanner /> */}
            </div>
          </MediaQuery>
        </div>
      }

      <Snackbar
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        autoHideDuration={toastDuration}
        open={toastOpen}
        onClose={handleClose}
        message={toastMessage}
      />

      <CountrySelect
        country={country} 
        setCountry={setCountry} 
        setOpen={setCountryDialogOpen} 
        open={countryDialogOpen}
        countries={countries}
      />

      <InfoDialog
        open={infoOpen}
        setOpen={setInfoOpen}
      />
    </div>
  );
}
